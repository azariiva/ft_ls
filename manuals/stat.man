#include <sys/stat.h>

int lstat(const char *restrict path, struct stat *restrict buf);
int stat(const char *restrict path, struct stat *restrict buf);

The stat() function obtains information about the file pointed to by path.
Read, write or execute permission of the named file is not required, but all
directories listed in the path name leading to the file must be searchable.

The lstat() function is like stat() except in the case where the named file is a
symbolic link; lstat() returns information about the link, while stat() returns
information about the file the link references.  For symbolic links, the st_mode
member contains meaningful information when used with the file type macros, and
the st_size member contains the length of the pathname contained in the symbolic
link. File mode bits and the contents of the remaining members of the stat
structure are unspecified. The value returned in the st_size member is the
length of the contents of the symbolic link, and does not count any trailing
null.

struct stat { /* when _DARWIN_FEATURE_64_BIT_INODE is NOT defined */
	dev_t    st_dev;    /* device inode resides on */
	ino_t    st_ino;    /* inode's number */
	mode_t   st_mode;   /* inode protection mode */
	nlink_t  st_nlink;  /* number of hard links to the file */
	uid_t    st_uid;    /* user-id of owner */
	gid_t    st_gid;    /* group-id of owner */
	dev_t    st_rdev;   /* device type, for special file inode */
	struct timespec st_atimespec;  /* time of last access */
	struct timespec st_mtimespec;  /* time of last data modification */
	struct timespec st_ctimespec;  /* time of last file status change */
	off_t    st_size;   /* file size, in bytes */
	quad_t   st_blocks; /* blocks allocated for file */
	u_long   st_blksize;/* optimal file sys I/O ops blocksize */
	u_long   st_flags;  /* user defined flags for file */
	u_long   st_gen;    /* file generation number */
};

The time-related fields of struct stat are as follows:

     st_atime         Time when file data last accessed.  Changed by the
	 mknod(2), utimes(2) and read(2) system calls.

     st_mtime         Time when file data last modified.  Changed by the
	 mknod(2), utimes(2) and write(2) system calls.

     st_ctime         Time when file status was last changed (inode data
	 modification).  Changed by the chmod(2), chown(2), link(2), mknod(2),
	 rename(2), unlink(2), utimes(2) and write(2) system calls.

     st_birthtime     Time of file creation. Only set once when the file is
	 created. This field is only available in the 64 bit inode variants. On
	 filesystems where birthtime is not available, this field is set to 0
	 (i.e. epoch).

     The size-related fields of the structures are as follows:

     st_blksize     The optimal I/O block size for the file.

     st_blocks      The actual number of blocks allocated for the file in
	 512-byte units.  As short symbolic links are stored in the inode, this
	 number may be zero.

     The status information word st_mode has the following bits:

     #define S_IFMT 0170000           /* type of file */
     #define        S_IFIFO  0010000  /* named pipe (fifo) */
     #define        S_IFCHR  0020000  /* character special */
     #define        S_IFDIR  0040000  /* directory */
     #define        S_IFBLK  0060000  /* block special */
     #define        S_IFREG  0100000  /* regular */
     #define        S_IFLNK  0120000  /* symbolic link */
     #define        S_IFSOCK 0140000  /* socket */
     #define        S_IFWHT  0160000  /* whiteout */
     #define S_ISUID 0004000  /* set user id on execution */
     #define S_ISGID 0002000  /* set group id on execution */
     #define S_ISVTX 0001000  /* save swapped text even after use */
     #define S_IRUSR 0000400  /* read permission, owner */
     #define S_IWUSR 0000200  /* write permission, owner */
     #define S_IXUSR 0000100  /* execute/search permission, owner */

Upon successful completion a value of 0 is returned.  Otherwise, a value of -1
is returned and errno is set to indicate the error.
